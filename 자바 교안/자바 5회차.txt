

* 제어문

- 제어문의 종류는 조건문, 반복문, 탈출문이 있습니다.

- 조건문은 특정 조건을 만족할 때 실행할 문장을 작성하는데 사용합니다.

- 반복문은 여러 번 반복 실행할 코드가 있다면 반복문을 작성합니다.

- 반복문이 실행되는 동안 실행을 중지시키고 싶으면 탈출문을 사용합니다.


* 조건문 if ~ else

- if문은 프로그램의 흐름을 바꾸는데 사용되는 조건 선택 분기문입니다.
- if문의 조건식 결과는 반드시 boolean형이어야 되며, 조건식이 참이면 if문 블록안의 실행문이 실행되고, 거짓이면 else문 블록안의 실행문이 실행됩니다.
- if문장은 else문장 없이 사용할 수 있습니다. 그러나 else문장은 if문장 없이 단독으로 사용할 수 없습니다.
- 조건식의 결과가 거짓일 때 실행할 문장이 없다면, else문 이하를 생략해도 됩니다.


* 다중 분기 조건문 if ~ else if ~ else

- 여러 조건들을 설정할 때 사용하는 조건문입니다.
- 다중 분기 조건문은 위에서부터 차례로 조건을 검색합니다.








* 조건문 switch ~ case

- 복합 if문은 구현하기 복잡하고 프로그램의 효율성이 감소되는 단점이 있기 때문에, 다중 분기 문제를 해결할 때는 switch문을 사용합니다.

- switch문은 다중 분기 구조이므로 복합 if문의 논리적인 구조를 간결하게 표현할 수 있습니다.

- if문과는 달리 조건식이 사용되지 않고, 값을 가지는 변수 또는 표현식이 판단조건으로 사용되며, 연산 결과의 데이터 타입은 int, String, Enum(열거형)이 사용됩니다.

- case문 뒤에 사용되는 값은 변수를 사용할 수 없고, 반드시 상수를 사용해야 합니다.

- switch ~ case문에서 default는 if~else에서 else와 비슷한 효과를 가집니다.











* 명령행 인자(args) 사용법

- 명령행 인자는 외부(운영체제)에서 값을 전달받을 때 사용하는 매개 변수입니다.

# 이클립스를 통해 운영체제에서 값을 전달받는 방법.
run -> run configuration -> 사용할 클래스 선택 -> arguments탭 클릭 -> program arguments에 ${string_prompt}

- 곱셈에 해당하는 연산자는 * 이지만 명령행 인자의 값에 *를 사용하면 운영체제에서 임의의 문자열을 표현하는 메타문자인 * 과 기능이 겹치기 때문에 인식오류가 납니다.



* String 문자열을 int형으로 치환하는 방법

	String str = "2002";
	int year = Integer.parseInt(str);
     --> year 변수에 정수값 2002가 할당됨.

- parseInt() 메서드를 사용하려면 치환하기 전의 String 변수 값이 반드시 숫자 형태여야 한다.
	








* 반복문 while 

- while문은 조건식을 만족하는 동안 반복문을 실행하는데, 조건식을 검사해서 조건식이 참이면 실행문을 반복하고, 거짓이면 while문을 빠져나옵니다.

- while문에 들어가는 조건식도 if문과 마찬가지로 반드시 boolean타입으로 결과를 반환해야 합니다.

- 조건식 안에 true를 넣으면 무한루프가 발생하기 때문에 반드시 탈출구문을 넣어야 합니다.









* 반복문 do ~ while

- while문은 조건식을 먼저 검사하고 실행문이 반복되기 때문에 처음 실행 조건이 false라면 실행문이 단 한번도 실행되지 않습니다.

- 그러나 do ~ while문은 do 이하의 구문이 먼저 한 번 실행된 뒤에 조건식을 검사하므로 결과가 true이든 false이든 무조건 한번은 실행이 됩니다.

- do ~ while문은 조건식의 결과에 상관없이 루프를 반드시 한번 이상 실행시키도록 할 때 사용합니다.






