
* 탈출문

- 탈출문은 프로그램의 실행 순서를 지정된 곳으로 이동시키는 문장으로 반복문 또는 블록구조에서 빠져 나올 때 사용합니다.

- 탈출문의 키워드는 break, continue, return문이 있습니다.

- goto는 자바의 키워드에는 포함되어 있으나 사용하지는 않습니다.

1. break

- break는 반복문 내의 어떤 곳이든 위치할 수 있으며, 처리 도중에 break를 만나면 반복문을 곧바로 빠져나옵니다.

- 중첩 반복문의 경우에 내부 반복문에서 break가 사용되었을 경우 그 break문이 속한 내부 반복문만 빠져나오게 됩니다.

- 중첩 반복문에서 바깥쪽 반복문까지 종료시키려면 바깥쪽 반복문에 이름(label) 을 붙이고, "break 이름;"을 사용하면 됩니다.









2. continue

- continue문은 반복문 내의 어떤 곳이든지 위치할 수 있습니다.

- continue문을 만나면 반복문의 맨 처음으로 제어가 이동하여 다음 반복문을 위한 증/감식을 실행합니다.

- continue문을 만날 때마다 이후 실행문은 건너뛰어 실행되지 않습니다.
 








3. return

- return문은 메서드의 실행을 끝내고 결과 값을 호출된 부분에 반환하는 문장입니다.

- return문만 단독으로 사용했을 때는 호출된 곳으로 제어만 넘어가지만, return문 뒤에 연산식과 함께 사용되면 식의 결과 값과 제어가 함께 넘어갑니다. 






* 메서드(method)

- 메서드는 반복되는 코드 블록에 이름을 붙여 놓은 것입니다.

- 메서드는 반복되는 코드를 줄여주고, 좀 더 구조화시켜 우리가 코드를 알아보기 쉽게 합니다.

- 객체지향프로그래밍에서 메서드는 '객체가 가져야할 기능을 구현하기 위해 만든다'라고 표현하기도 합니다.

- 메서드의 이름 뒤에는 반드시 소괄호'()'가 따릅니다.

- 메서드 선언 방법


< 반환 유형 > < 메서드 식별자 이름> (매개 변수) {
	기능 상세;
}









* 반환 유형(return type)

- 반환 유형은 메서드가 실행한 후 메서드를 호출한 곳에 반환하는 값의 데이터 타입을 말합니다.

- 메서드는 반환값이 있을 수도 있고 없을 수도 있는데 없는 경우에는 반환 유형에 void를 적어줘야 합니다.

- 반환값이 있는 메서드를 호출할 때는 해당 반환유형에 맞는 변수에 반환값을 저장해야 합니다.

- 메서드가 실행의 결과값을 반환할 때는 return이라는 키워드를 사용합니다.



* 매개 변수(parameter)

- 매개 변수는 메서드가 실행될 때 필요한 데이터를 외부로부터 받기 위해 사용됩니다.

- 매개 변수도 일종의 변수이기 때문에 메서드의 소괄호() 부분에 데이터 타입과 함께 선언해야 하며 초기화는 하지 않습니다.

- 매개 변수를 여러개 선언할 수 있으며, 메서드가 외부로부터 받을 데이터가 없다면 선언하지 않을 수도 있습니다. 이때는 반환 유형을 적을때와 같이 void를 쓰지 않고 소괄호() 안을 비워둬야 합니다.






* System.out.print() 메서드

- 콘솔창에 특정 데이터를 출력하는 메서드입니다.
- 특정 문자열을 출력하려면 출력할 문자열을 ""로 감싸줍니다.
- 변수의 값을 출력하려면 ""로 감싸지 않고 변수 이름으로 표기합니다.
- 특정 문자열과 변수의 값을 동시에 출력하려면 출력할 값을 + 연산자로 연결해줍니다.

ex) int a = 10;
      System.out.print("a의 값은: " + a + "입니다.");

- 콘솔창으로 값을 출력하고 줄을 바꾸는 기능을 하려면 println() 메서드를 이용합니다. (\r\n)