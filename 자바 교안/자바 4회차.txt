
* 배열(Array)


- 배열은 같은 데이터 유형 변수를 여러 개 선언해야 하는 불편함을 줄이기 위해 사용합니다.
- 자바에서는 배열도 일종의 데이터 타입으로 취급할 수 있기 때문에 배열을 정의하는 대괄호"[]"가 배열 변수명 앞에 오는 것이 가능합니다.

- 배열의 구조
배열 선언: <데이터 타입><배열 이름[]> or <데이터 타입[]><배열 이름>
배열 생성: <배열 이름> = new <데이터 타입[배열의 크기]>


- 자바의 배열은 선언시에는 크기를 명시할 수 없으며, 생성시에 크기를 명시한다.

- 배열은 기본데이터 타입이나 객체참조 데이터 타입 또는 다른 배열의 순차적인 집합체라고 할 수 있습니다.

- 하나의 배열에 여러가지 데이터형을 혼합해서 사용할 수 없습니다. 이런 배열의 특징을 동종모음(Homogeneous 
collection)이라고 합니다.
- 배열은 선언, 생성, 초기화의 과정을 통하여 만들어집니다.

- 선언 시에는 배열에 들어갈 데이터 타입을 결정하고, 생성 시 만들 배열의 크기를 결정합니다. 그리고 초기화 과정을 통하여 배열에 들어갈 값을 입력해 줍니다.

- 배열의 길이란 배열에 저장할 수 있는 전체 항목 수를 말하는데 코드에서 배열의 길이를 얻으려면 '배열변수이름.length'라는 코드를 사용합니다.









* 자바 표준 입/출력(IO: Input/Output)

- IO란 입력과 출력을 뜻합니다.

- Input:
1. 파일의 데이터를 읽는다. (loading)
2. 키보드의 입력데이터를 읽는다.
3. 네트워크상의 데이터를 읽는다.

- Output
1. 파일에 데이터를 쓴다.(save)
2. 모니터에 데이터를 쓴다.(모니터에 데이터를 출력한다.)
3. 네트워크상에 데이터를 쓴다.(파일 전송)

- 자바에서 데이터를 출력하는 명령은 System.out이고, 데이터를 입력받을 때는 System.in을 이용합니다.

- 데이터를 입력받을 때는 표준 JAVA API인 Scanner클래스를 사용하며, 이 Scanner 클래스는 다양한 타입의 입력 값들을 읽어들이기 위한 메서드들을 제공합니다.





- Scanner API 사용법

1. 스캐너 객체 생성
ex) Scanner scan = new Scanner(System.in);

2. 입력 받을 데이터 타입에 따른 메서드 호출.







ex) scan.next(), scan.nextLine(), scan.nextInt(), scan.nextDouble() 등

- next(): 공백을 포함하지 않는 문자열을 입력 받을 때
- nextLine(): 공백을 포함한 문자열을 입력 받을 때
- nextInt(): 정수를 입력 받을 때
- nextDouble(): 실수를 입력 받을 때

3. 스캐너 객체 종료.

ex) scan.close();





* 제어문

- 제어문의 종류는 조건문(if), 반복문(While,for), 탈출문(break,contine,return)이 있습니다.

- 조건문은 특정 조건을 만족할 때 실행할 문장을 작성하는데 사용합니다.

- 반복문은 여러 번 반복 실행할 코드가 있다면 반복문을 작성합니다.

- 반복문이 실행되는 동안 실행을 중지시키고 싶으면 탈출문을 사용합니다.






* 조건문 if ~ else

- if문은 프로그램의 흐름을 바꾸는데 사용되는 조건 선택 분기문입니다.
- if문의 조건식 결과는 반드시 boolean형이어야 되며, 조건식이 참이면 if문 블록안의 실행문이 실행되고, 거짓이면 else문 블록안의 실행문이 실행됩니다.
- if문장은 else문장 없이 사용할 수 있습니다. 그러나 else문장은 if문장 없이 단독으로 사용할 수 없습니다.
- 조건식의 결과가 거짓일 때 실행할 문장이 없다면, else문 이하를 생략해도 됩니다.






* 다중 분기 조건문 if ~ else if ~ else

- 여러 조건들을 설정할 때 사용하는 조건문입니다.
- if ~ else if 구문은 위에서부터 차례대로 조건을 검색하면서 내려오므로 조건식 설정에 주의를 해야 합니다.






